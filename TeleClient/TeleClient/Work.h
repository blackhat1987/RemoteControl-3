//******************************************************************************
// License:     MIT
// Author:      Hoffman
// GitHub:      https://github.com/JokerRound
// Create Time: 2018-11-30
// Description: 
//      The header file of class CWork.
//
// Modify Log:
//      2018-11-30    Hoffman
//      Info: a. Add below member methods.
//              a.1. WorkCallBack();
//              a.2. WorkBody();
//              a.3. CWork(): overload by pvContext;
//              a.4. GetPTPWork();
//              a.5. Init();
//            b. delete below member method.
//              a.1. CWork(): default.
//            c. Add below type.
//              c.1. struct tagWorkContext;
//            d. Add below member variables.
//              d.1. m_pstWork; 
//              d.1. m_stWorkContext;
//              d.1. m_pstCriticalSections; 
//              d.1. m_hEvent;
//
//      2018-12-02    Hoffman
//      Info: a. Add below member methods.
//              a.1. CreateEvent();
//              a.1. WaitForEvent();
//              a.3. WaitForFinish();
//
//      2018-12-08    Hoffman
//      Info: a. Add below member method.
//              a.1. UpdateWorkContext();
//
//      2018-12-18    Hoffman
//      Info: a. Modify below member methods.
//              a.1. Init();
//                  a.1.1. Don't need the parament.
//              b.1. CWork();
//                  b.1.1. Don't need the parament.
//******************************************************************************

#pragma once
#ifndef WORK_H_
#define WORK_H_
#include <stdexcept>
#include <Windows.h>
#include <tchar.h>

class CWork
{
    typedef struct tagWorkContext
    {
        LPARAM  lParam_;
        CWork   *pThis_;
    } WORKCONTEXT, *PWORKCONTEXT;

protected:
    PTP_WORK m_pstWork = NULL;
    WORKCONTEXT m_stWorkContext = { NULL };

    //**************************************************************************
    // FUNCTION:    Do some work when class instaniation, called by constuctor.
    // NOTE:
    //      1. This functions maybe throw below expections;
    //          1.1. std::runtime_error;
    //**************************************************************************
    void Init() noexcept(FALSE);

public:
    //**************************************************************************
    // FUNCTION:    Called when Class instantiation.
    // NOTE:
    //      1. This functions maybe throw below expections;
    //          1.1. std::runtime_error;
    //**************************************************************************
    CWork() noexcept(FALSE);
    virtual ~CWork();

    //**************************************************************************
    // FUNCTION:    The work call back for thread pool.
    // PARAMETER:   
    //      pstInance:  Ignore.
    //      pvContext:  The parament is passed to WorkBody function.
    //      pstWork:    The work object, generated by win api
    //                  CreateThreadpoolWork.
    //**************************************************************************    
    static void WorkCallBack(_In_ PTP_CALLBACK_INSTANCE pstInstance,
                             _In_ PVOID pvContext,
                             _In_ PTP_WORK pstWork) noexcept(FALSE);

    //**************************************************************************
    // FUNCTION:    The primary body of work, called by WorkCallBack funciton.
    // RETURN:      Successfully (true) or failly (false).
    // PARAMETER:   
    //      lParam: The parament passed by WorkCallBack function.
    //**************************************************************************
    virtual BOOL WorkBody() noexcept(FALSE);

    //**************************************************************************
    // FUNCTION:    Get the point of sturct TP_WORK.
    // RETURN:      PTP_WORK;
    //**************************************************************************
    PTP_WORK GetPTPWork() const noexcept;

    //**************************************************************************
    // FUNCTION:    Create event for work item.
    // OUPUT:       It has some debug info when debug version.
    //**************************************************************************
    void WaitForFinish();


    //**************************************************************************
    // FUNCTION:    Update the parament passes to work body.
    // PARAMETER:   
    //      1. pvContext:   the point of parament want to update.
    //**************************************************************************
    void UpdateWorkContext(_In_ PVOID pvContext);
};

#endif // !WORK_H_
